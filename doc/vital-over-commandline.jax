*vital-over-commandline.txt*		独自コマンドラインを定義するフレームワーク

==============================================================================
目次						*vital-over-commandline-contents*

インターフェース		|Vital.Over.Commandline-interface|
  関数				  |Vital.Over.Commandline-functions|
コマンドライン			|Vital.Over.Commandline-object|
キーマッピング			|Vital.Over.Commandline-keymapping|
モジュール			|Vital.Over.Commandline-modules|


==============================================================================
インターフェース			*Vital.Over.Commandline-interface*

------------------------------------------------------------------------------
関数					*Vital.Over.Commandline-functions*

make_standard({prompt})			*Vital.Over.Commandline.make_standard()*
	標準のコマンドラインの挙動に準じたコマンドラインオブジェクトを生成しま
	す。
	オブジェクトの内容は |Vital.Over.Commandline.object| を参照して下さ
	い。
				*Vital.Over.Commandline.make_standard_search()*
make_standard_search({prompt})
	標準の検索コマンドラインの挙動に準じたコマンドラインオブジェクトを生成
	します。
	前方検索します。

			*Vital.Over.Commandline.make_standard_search_back()*
make_standard_search_back({prompt})
	標準の検索コマンドラインの挙動に準じたコマンドラインオブジェクトを生成
	します。
	後方検索します。

make_default({prompt})			*Vital.Over.Commandline.make_default()*
	|Vital.Over.Commandline.object| のオブジェクトを生成します。
	NOTE: この関数で生成したオブジェクトは何も行いません。
	キャンセルや実行などもできないので注意して下さい。

get_module({name})			*Vital.Over.Commandline.get_module()*
	{name} の |Vital.Over.Commandline.modules| を取得します。
	導入されていないモジュールは失敗します。

make_module({name}[, {args...}])	*Vital.Over.Commandline.make_module()*
	{name} の |Vital.Over.Commandline.modules| を生成します。
	導入されていないモジュールは失敗します。

==============================================================================
コマンドライン				*Vital.Over.Commandline-object*

|Vital.Over.Commandline-make_standard()| 等で生成したオブジェクトが保持する関
数です。
また、このオブジェクトは "_" + 英数字から始まる要素を定義しないことが保証され
ています。
このオブジェクトに対して、ユーザ側で変数や関数を定義したい場合は "_" + 英数字
からはじまる名前を使うことを推奨します。
NOTE https://github.com/osyo-manga/vital-over/issues/128
>
	let cmdline = make_standard()
	" オブジェクトに変数を定義する場合は
	" let cmdline.my_value = 10
	" _ から始めることを推奨
	let cmdline._my_value = 10

<

CORE					*Vital.Over.Commandline.object-core*

object.getline()		*Vital.Over.Commandline.object-getline()*
	コマンドラインの文字列を返します

object.setline({line})			*Vital.Over.Commandline.object-setline()*
    コマンドラインに {line} を設定します

object.char()				*Vital.Over.Commandline.object-char()*
	入力された文字を返します

object.setchar({char})			*Vital.Over.Commandline.object-setchar()*
	コマンドラインに挿入される文字{char}を設定します
	コマンドラインに文字を挿入したくない場合は空の文字を設定して下さい

object.getpos()			*Vital.Over.Commandline.object-getpos()*
    コマンドラインのカーソル位置を返します

object.setpos({col})			*Vital.Over.Commandline.object-setpos()*
    コマンドラインのカーソル位置を {col} 設定します

object.is_input({key})			*Vital.Over.Commandline.object-input()*
	{key} が入力されたかどうかを判定します。
	入力されたかどうかの判定は char() と比較するのではなくて is_input() を
	使用して下さい。
Example: >
	" a が押されたら a が変える
    is_input("a")

    " <C-c> が押されたら 1 が変える
    is_input("\<C-c>")
<

object.forward()		*Vital.Over.Commandline.object-forward()*
	カーソル位置より前方のコマンドラインの文字列を返します。
	カーソル上の文字は含みません。

object.backward()		*Vital.Over.Commandline.object-backward()*
	カーソル位置より後方のコマンドラインの文字列を返します。
	カーソル上の文字を含みます。

object.connect({module} [, {name}])	*Vital.Over.Commandline.object-connect()*
	{name} という名前の {module} を追加します。
	{module} はモジュールの実装を記述した辞書になります。
	{name} は disconnect() 時に使用されます。
	{name} がなければ {module} の "name" キーの値が使用されます。
	また、{module} が文字列の場合はその名前のモジュールが追加されます。
Example: >
	" コマンドラインのオブジェクトを生成
	let s:my = s:cmdline.make_plain("$ ")
	
	
	" 使用したいモジュールを追加
	" get_module() でモジュールを取得できる
	call s:my.connect(s:cmdline.get_module("Scroll").make())
	
	" 直接名前をしていする事も可能
	" この場合は
	" s:cmdline.get_module("CursorMove").make()
	" と同等
	call s:my.connect("CursorMove")
<


object.disconnect({name})	*Vital.Over.Commandline.object-disconnect()*
	{name} のモジュールを削除します。

object.start([{string}])		*Vital.Over.Commandline.object-start()*
	コマンドラインの入力を開始します。
	コマンドラインが正常終了した場合、入力した文字列を |:execute| で実行し
	ます。
	{string} を指定した場合，{string}が入力された状態で開始します．

object.get([{string}])			*Vital.Over.Commandline.object-get()*
	コマンドラインの入力を開始します。
	|Vital.Over.Commandline.object-start()| とは違い入力されたコマンドは実
	行されません。
	コマンドラインが正常終了した場合に入力された文字列を返します。
	異常終了した場合は空の文字列を返します。
	{string} を指定した場合，{string}が入力された状態で開始します．


object.exit([{exitcode}])		*Vital.Over.Commandline.object-exit()*
	コマンドラインを終了します。
	{exitcode} は exit_code() が返す値になります。
	引数がなければ 0 が設定されます。

object.exit_code()		*Vital.Over.Commandline.object-exit_code()*
	終了コードを返します。
	0	: 正常終了
	0 以外	: 異常終了(e.g. <Esc> や <C-c> で終了した場合)

object.is_exit()		*Vital.Over.Commandline.object-is_exit()*
	いずれかのタイミングでコマンドラインが終了していた時に 1 が返ってきま
	す。
	それ以外は 0 が返ってきます。

object.cmap({lhs}, {rhs})		*Vital.Over.Commandline.object-cmap()*
	{lhs} に {rhs} のキーを割り当てます。
Example: >
	call s:my.cmap("\<C-f>", "\<Right>")
	call s:my.cmap("\<C-b>", "\<Left>")
<
	NOTE: {rhs} には複数の文字も設定できるが一部特殊文字が含まれている場
	合は |NFA| が組み込まれている必要がある
Example: >
	" 1文字ならば問題ない
	call s:my.cmap("\<C-f>", "\<Right>")
	call s:my.cmap("\<C-b>", "\<Left>")

	" 複数の文字は NFA が使用できる場合のみ機能する
	call s:my.cmap("\<A-f>", "\<Right>\<Right>")
	call s:my.cmap("\<A-b>", "\<Left>\<Left>")
<


object.cnoremap({lhs}, {rhs})	*Vital.Over.Commandline.object-cnoremap()*
	{lhs} に {rhs} のキーを割り当てます。
	cmap() とは違い再マップされません。

object.cunmap({lhs})			*Vital.Over.Commandline.object-cunmap()*
	{lhs} に割り当てられたキーマップを削除します。


object.set_prompt({string})	*Vital.Over.Commandline.object-set_prompt()*
	プロンプトに {string} を設定します。

object.get_prompt()		*Vital.Over.Commandline.object-get_prompt()*
	現在のプロンプトの文字列を返します。

object.enable_keymapping()	*Vital.Over.Commandline.object-enable_keymapping()*
	キーマッピングを有効にします。
	コマンドラインを開始した時に自動的に有効になります。
	
object.disable_keymapping()	*Vital.Over.Commandline.object-disable_keymapping()*
	キーマッピングを無効にします。
	コマンドラインの開始時にキーマッピングを無効にしたい場合は、
	|Vital.Over.Commandline.object-on_enter()|
	でこの関数を呼ぶ必要があります。

			*Vital.Over.Commandline.object-is_enable_keymapping()*
object.is_enable_keymapping()
	キーマッピングが有効なら 1 を返し、無効なら 0 を返します。

object.getchar()		*Vital.Over.Commandline.object-getchar()*
	|getchar()| と同等ですが、スタックにキーが積まれていればそちらを優先
	して使用します。

object.execute([{cmd}])		*Vital.Over.Commandline.object-execute()*
	{cmd} の実行を行ないます。
	{cmd} が渡されなかった時は現在入力されている文字列が使用されます。
	この関数が呼ばれた時に
	|Vital.Over.Commandline.object-on_execute()| 等が呼ばれます。
	また、この時のコマンドの実行方法は
	|Vital.Over.Commandline.object-__execute__()| に依存します。
	デフォルトでは |:execute| が呼び出されます。


CALLBACK			*Vital.Over.Commandline.object-callback*

object.priority({event})	*Vital.Over.Commandline.object-priority()*
	{event} 時に処理される優先順位を返します。
	返す数値が低いほうが先に処理されます。

object.on_enter({self})		*Vital.Over.Commandline.object-on_enter()*
	コマンドラインが開始された時に呼ばれる関数です。

object.on_leave({self})		*Vital.Over.Commandline.object-on_leave()*
	コマンドラインが終了された時に呼ばれる関数です

object.on_char_pre({self})	*Vital.Over.Commandline.object-on_char_pre()*
	コマンドラインで文字が入力され、コマンドラインに挿入される前に呼ばれる
	関数です

object.on_char({self})		*Vital.Over.Commandline.object-on_char()*
	コマンドラインで文字が入力され、コマンドラインに挿入された後に呼ばれる
	関数です。

object.on_execute_pre({self})	*Vital.Over.Commandline.object-on_execute_pre()*
	コマンドラインでコマンドが実行される直前に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。

object.on_execute({self})	*Vital.Over.Commandline.object-on_execute()*
	コマンドラインでコマンドが実行された後に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。
			*Vital.Over.Commandline.object-on_execute_failed()*
object.on_execute_failed({self})
	コマンドラインでコマンドを実行し、失敗した時に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。
				*Vital.Over.Commandline.object-on_update()*
object.on_update({self})
	キー入力の処理を行う直前に呼ばれる関数です。


OVERRIDE			*Vital.Over.Commandline.object-override*
ユーザ側で定義することで処理を変更するための関数です

			*Vital.Over.Commandline.object-__execute__()*
object.__execute__({command})
	入力確定時に {command} を実行する関数です。
	デフォルトでは {command} を |:execute| します。

			*Vital.Over.Commandline.object-__keymapping__()*
object.__keymapping__()
	キーマッピングの辞書を返します。
				*Vital.Over.Commandline.object-keymapping()*
	以前の名前は keymapping()


==============================================================================
キーマッピング				*Vital.Over.Commandline-keymapping*

コマンドライン上での独自のキーマッピングを cmap()/cnoremap()、もしくは辞書で定
義することができます。

Example: >
 	let s:cmdline  = vital#of("vital").import("Over.Commandline")
	let s:my = s:cmdline.make_standard("$ ")
	
	" カーソル移動を別のキーに割り当てる
	call s:my.cnoremap("\<C-f>", "\<Right>")
	call s:my.cnoremap("\<C-b>", "\<Left>")
	call s:my.cnoremap("\<C-n>", "<Over>(scroll-e)")
	call s:my.cnoremap("\<C-p>", "<Over>(scroll-y)")

	" レジスタ "+" の挿入
	call s:my.cnoremap("\<C-a>", "\<C-r>+")



定義した辞書は各コマンドラインの |Vital.Over.Commandline-object-keymapping()|
で返すことでそのコマンドラインに反映されます。
以下のように辞書を使用する場合はキーに {lrh} を値に {rhs} を設定します。

Example: >
	let s:cmdline  = vital#of("vital").import("Over.Commandline")
	let s:my = s:cmdline.make_standard("$ ")
	
	" キーマッピングを設定する
	function! s:my.keymapping()
		" <C-f> に <Right>
		" <C-b> に <Left> を割り当てる
		return {
	\		"\<C-f>" : "\<Right>",
	\		"\<C-b>" : "\<Left>",
	\	}
	endfunction
<

また、再マップされないようにする場合は次のように {rhs} に辞書を設定して下さ
い。

Example: >
	function! s:my.keymapping()
		" <C-f> は再マップされない
		return {
	\		"\<C-f>" : {
	\			"key" : "\<Right>",
	\			"noremap" : 1,
	\		},
	\		"\<C-b>" : "\<Left>",
	\		"\<Right>" : "\<Left>",
	\	}
	endfunction
<


また、キーマッピングの優先順位は次のようになります。

1．コマンドラインオブジェクトのkeymapping()
2．コマンドラインオブジェクトの cmap()/cnoremap() で追加されたキーマップ
3．各モジュールで定義されているキーマップ

上から順に優先順位が高いです。


==============================================================================
モジュール				*Vital.Over.Commandline-modules*

|Vital.Over.Commandline-object| はモジュールを追加する事でその機能を拡張する事
ができます。
これは以下のように利用することができます。

Example: >
	let s:V = vital#of("vital")
	let s:cmdline = s:V.import("Over.Commandline")
	
	
	" コマンドラインのオブジェクトを生成
	let s:my = s:cmdline.make_plain("$ ")
	
	
	" 使用したいモジュールを追加
	" 使用したいモジュールを追加
	" get_module() でモジュールを取得できる
	call s:my.connect(s:cmdline.get_module("Scroll").make())
	
	" 直接名前をしていする事も可能
	" この場合は
	" s:cmdline.get_module("CursorMove").make()
	" と同等
	call s:my.connect("CursorMove")
<
特に記述がない限りは make() を使用してそのモジュールを生成します。
また、<Over> から始まるキーは任意のキーに割り当てて使用します。


名前			        機能~
BufferComplete		        起動したバッファのワードで補完
Cancel(*)		        コマンドラインの中断
CursorMove(*)		        カーソル移動
Delete(*)		        文字の削除
Execute(*)		        コマンドの実行
HistAdd(*)		        |history| への追加
History(*)		        コマンド履歴の呼び出し
Incsearch		        |incsearch| のような挙動のエミュレート
KeyMapping		        キーマッピングの提供
NoInsert(*)		        挿入しない文字の処理
Paste			        @* の挿入
Scroll			        起動したウィンドウのスクロール
InsertRegister(*)	        レジスタの内容を挿入
Doautocmd		        |User| の呼び出し
IgnoreRegexpBackwardWord	カーソル前の単語の検出で正規表現を無視
Digraphs			|digraph| 機能

(*) が付いているモジュールは Over.Commandline に付属します。
それ以外のモジュールは |:Vitalize| 時に個別に指定して導入する必要があります。


BufferComplete			*Vital.Over.Commandline-modules-BufferComplete*
	起動したバッファ上の単語で補完を行います。

		*Vital.Over.Commandline-modules-BufferComplete-keymapping*
	キー				機能~
	<Over>(buffer-complete)		補完の開始
					次の補完へ移動
	<Over>(buffer-complete-prev)	補完の開始
					前の補完へ移動
	<Right>				補完中であれば次の補完へ移動
	<Left>				補完中であれば前の補完へ移動

Cancel					*Vital.Over.Commandline-modules-Cancel*
	コマンドラインの入力を中断します。
	このモジュールで終了した場合は終了コードが 1 になります。

			*Vital.Over.Commandline-modules-Cancel-keymapping*
	キー		機能~
	<Esc>, <C-c>	入力を中断
	<C-h>, <BS>	入力された文字がない場合に中断

CursorMove			*Vital.Over.Commandline-modules-CursorMove*
	カーソル移動を行います。
			*Vital.Over.Commandline-modules-CursorMove-keymapping*
	キー			機能~
	<Right>			カーソルを右に移動
	<Left>			カーソルを右に移動
	<C-b>, <Home>		カーソルを行頭へ移動
	<C-e>, <End>		カーソルを行末へ移動
	<C-Left>, <S-Left>	カーソルを 1WORD 分左へ移動
	<C-Right>, <S-Right>	カーソルを 1WORD 分右へ移動

Delete					*Vital.Over.Commandline-modules-Delete*
	入力された文字の削除を行います。
			*Vital.Over.Commandline-modules-Delete-keymapping*
	キー		機能~
	<C-h>, <BS>	カーソル位置より後ろの1文字を削除
	<C-w>		カーソル位置より後ろの単語を削除
	<C-u>		カーソル位置より後ろの文字を全て削除
	<Del>		カーソル位置上の文字を削除

Execute					*Vital.Over.Commandline-modules-Execute*
	|Vital.Over.Commandline.object-execute()| を呼び出し、コマンドの実行を
	行ないます。
			*Vital.Over.Commandline-modules-Execute-keymapping*
	キー			機能~
	<CR>, <NL>, <C-j>	入力されているコマンドを実行し、コマンドライン
				を終了する
	<Over>(execute-no-exit)	入力されているコマンドを実行。コマンドラインは
				終了しません。

Exit					*Vital.Over.Commandline-modules-Exit*
	コマンドラインを終了します。
			*Vital.Over.Commandline-modules-Exit-keymapping*
	キー			機能~
	<Over>(exit)	コマンドラインを終了します。

HistAdd					*Vital.Over.Commandline-modules-HistAdd*
	入力された文字を履歴に追加します。
			*Vital.Over.Commandline-modules-HistAdd-function*
	make({mode})
		{mode} に履歴を追加します。
		{mode} の値は |histadd()| と同じです。

History					*Vital.Over.Commandline-modules-History*
	コマンド履歴を挿入します。
			*Vital.Over.Commandline-modules-History-keymapping*
	キー		機能~
	<Up>		前の履歴を挿入
	<Down>		次の履歴を挿入

			*Vital.Over.Commandline-modules-History-function*
	make({mode})
		{mode} の履歴を挿入します。
		{mode} の値は |histadd()| と同じです。

KeyMapping			*Vital.Over.Commandline-modules-KeyMapping*
	キーマッピングを提供します。
			*Vital.Over.Commandline-modules-KeyMapping-function*
	make_emacs()
		Emacs のようなキーマッピングを提供します。
	make_vim_cmdline_mapping()
		Vimデフォルトの |:cmap|, |:cnoremap| で定義されたマッピングを展開
		して適用したキーマッピングを提供します。

NoInsert			*Vital.Over.Commandline-modules-NoInsert*
	挿入しない文字を設定します。
	また、挿入を行わないだけでキーの入力チェックは行われます。
			*Vital.Over.Commandline-modules-NoInsert-function*
	make_special_chars()
		特殊文字を挿入しない。

Scroll			*Vital.Over.Commandline-modules-Scroll*
	起動したバッファのウィンドウをスクロールします。
			*Vital.Over.Commandline-modules-Scroll-keymapping*
	キー			機能~
	<Over>(scroll-y)	|CTRL-y| と同等
	<Over>(scroll-u)	|CTRL-u| と同等
	<Over>(scroll-f)	|CTRL-f| と同等
	<Over>(scroll-e)	|CTRL-e| と同等
	<Over>(scroll-d)	|CTRL-d| と同等
	<Over>(scroll-b)	|CTRL-b| と同等

InsertRegister			*Vital.Over.Commandline-modules-InsertRegister*
	レジスタの内容を挿入します。
		*Vital.Over.Commandline-modules-InsertRegister-keymapping*
	キー			機能~
	<C-r> {0-9a-z"%#:-=.}	レジスタの内容を挿入 |c_CTRL-R|
	<C-r> <C-f>		カーソル下のファイル名
	<C-r> <C-w>		カーソル下の word
	<C-r> <C-A>		カーソル下の WORD

Doautocmd			*Vital.Over.Commandline-modules-Doautocmd*
	以下のタイミングで |autocm| |User| を呼び出します。
	実際には make({prefix}) の {prefix} 文字が先頭に追加されます。
			*Vital.Over.Commandline-modules-Doautocmd-autocmd*
	名前			発生するとき ~
	Enter			コマンドラインが開始された時
	Leave			コマンドラインが終了した時
	CharPre			文字が入力され、コマンドラインに挿入される前
	Char			文字が入力され、コマンドラインに挿入された後
	ExecutePre		コマンドが実行される直前
	Execute			コマンドが実行された後
	ExecuteFailed		コマンドを実行し、失敗した時

			*Vital.Over.Commandline-modules-Doautocmd-function*
	make({prefix})
		{prefix} を追加した |autocm| |User| を呼び出します。
Example: >
	let s:V= vital#of("vital")
	let s:cmdline = s:V.import("Over.Commandline")
	let s:my = s:cmdline.make_plain("$ ")
	
	call s:my.connect(s:cmdline.get_module("Doautocmd").make("MyCmdline"))
	
	augroup test
		autocmd!
		" コマンドラインの起動時にプロンプトを変更する
		autocmd User MyCmdlineEnter let s:my.prompt = "homu >"
	augroup END
<

Redraw					*Vital.Over.Commandline-modules-Redraw*
	コマンドラインの再描画を行います。

DrawCommandline		*Vital.Over.Commandline-modules-DrawCommandline*
	コマンドラインへ描画します。

ExceptionExit		*Vital.Over.Commandline-modules-ExceptionExit*
	いずれかのタイミングで例外が発生した場合に中断します。

ExceptionMessage	*Vital.Over.Commandline-modules-ExceptionMessage*
	発生した例外の内容を出力します。

IgnoreRegexpBackwardWord
		    *Vital.Over.Commandline-modules-IgnoreRegexpBackwardWord*
	|Vital.Over.Commandline-modules-Delete| モジュールにおける <C-w>
	の単語の削除や, |Vital.Over.Commandline-modules-InsertRegister|
	における <C-r><C-w> による単語の挿入時に使用する単語において正規表現を
	無視するようにします。

	コマンドライン	WORD(デフォルト)	IgnoreRegexpBackwardWord~
	>hi word	"hi word"		"word"
	>\vword		"vword"			"word"
	>\\vword	"vword"			"vword"

Digraphs			*Vital.Over.Commandline-modules-Digraphs*
	Vim の |digraphs| 機能を有効化します
	キー			機能~
	<C-k>{char1}{char2}	ダイグラフの入力 (|c_CTRL-K| を参照)


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
